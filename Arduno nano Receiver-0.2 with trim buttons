//Receiver-0.2 with trim buttons
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <Servo.h>

// Pin assignments for the servo outputs
int ch_width_1 = 0;
int ch_width_2 = 0;
int ch_width_3 = 0;
int ch_width_4 = 0;
//int ch_width_5 = 0;
//int ch_width_6 = 0;

Servo ch1;
Servo ch2;
Servo ch3;
Servo ch4;
//Servo ch5;
//Servo ch6;

// Define the structure to store the received data
struct Signal {
  byte throttle;
  byte pitch;
  byte roll;
  byte yaw;
  //byte aux1;
  //byte aux2;
  int trimThrottle;
  int trimPitch;
  int trimRoll;
  int trimYaw;
};

Signal data;

// Define the NRF24L01 pipe address (this should match the transmitter)
const uint64_t pipeIn = 0xE9E8F0F0E1LL;
RF24 radio(9, 10);  // CE pin 9, CSN pin 10

void ResetData() {
  // Initialize the data structure to default values
  data.roll = 127;   // Center position
  data.pitch = 127;  // Center position
  data.throttle = 12; // Motor stop
  data.yaw = 127;    // Center position
  //data.aux1 = 127;   // Center position
  //data.aux2 = 127;   // Center position
  data.trimThrottle = 0;
  data.trimPitch = 0;
  data.trimRoll = 0;
  data.trimYaw = 0;
}

void setup() {
  // Set up the servo pins
  ch1.attach(2);  // D2
  ch2.attach(3);  // D3
  ch3.attach(4);  // D4
  ch4.attach(5);  // D5
  //ch5.attach(6);  // D6
  //ch6.attach(7);  // D7

  // Start the NRF24L01 radio
  ResetData();
  radio.begin();
  radio.openReadingPipe(1, pipeIn);  // Open the same pipe used in the transmitter
  radio.setAutoAck(true);  // Enable auto acknowledgment
  radio.setDataRate(RF24_250KBPS);  // Use the same data rate as the transmitter
  radio.setPALevel(RF24_PA_HIGH);  // Use the same power level as the transmitter
  radio.startListening();  // Start listening for incoming data

  pinMode(6, OUTPUT);  // Pin for LED or status indication
  //Serial.begin(9600);  // Start the serial monitor for debugging
}

unsigned long lastRecvTime = 0;  // Track the last time data was received

void recvData() {
  while (radio.available()) {
    radio.read(&data, sizeof(Signal));  // Read the incoming data
    lastRecvTime = millis();  // Update the last received time

    // Debugging: print the received data to the Serial Monitor
    //Serial.print("Received Data: Throttle: ");
    //Serial.print(data.throttle);
    //Serial.print(" Pitch: ");
    //Serial.print(data.pitch);
    //Serial.print(" Roll: ");
    //Serial.print(data.roll);
    //Serial.print(" Yaw: ");
    //Serial.print(data.yaw);
  
  }
}

void loop() {
  recvData();
  unsigned long now = millis();

  // Timeout mechanism - if no data is received for more than 1 second, reset the data
  if (now - lastRecvTime > 1000) {
    Serial.println("No data received. Resetting receiver values.");
    ResetData();  // Reset the data if no signal is received for 1 second
  }

  // Apply trims to the received data (throttle, pitch, roll, yaw)
  int throttleWithTrim = data.throttle + data.trimThrottle;
  int pitchWithTrim = data.pitch + data.trimPitch;
  int rollWithTrim = data.roll + data.trimRoll;
  int yawWithTrim = data.yaw + data.trimYaw;

  // Map the received data (including trims) to the PWM signal range (1000 to 2000 microseconds)
  ch_width_4 = map(yawWithTrim, 0, 255, 1000, 2000);     // pin D5 (PWM signal)
  ch_width_2 = map(pitchWithTrim, 0, 255, 1000, 2000);    // pin D3 (PWM signal)
  ch_width_3 = map(throttleWithTrim, 0, 255, 1000, 2000); // pin D4 (PWM signal)
  ch_width_1 = map(rollWithTrim, 0, 255, 1000, 2000);    // pin D2 (PWM signal)

  //ch_width_5 = map(data.aux1, 0, 255, 1000, 2000);        // pin D6 (PWM signal)
  //ch_width_6 = map(data.aux2, 0, 255, 1000, 2000);        // pin D7 (PWM signal)

  // Send the PWM signal to the servos
  ch1.writeMicroseconds(ch_width_1);
  ch2.writeMicroseconds(ch_width_2);
  ch3.writeMicroseconds(ch_width_3);
  ch4.writeMicroseconds(ch_width_4);
  //ch5.writeMicroseconds(ch_width_5);
  //ch6.writeMicroseconds(ch_width_6);

  // Debugging: print the PWM values to the Serial Monitor
  //Serial.print("PWM: T: ");
  //Serial.print(ch_width_3);  // Throttle PWM
  //Serial.print(" P: ");
  //Serial.print(ch_width_2);  // Pitch PWM
  //Serial.print(" R: ");
  //Serial.print(ch_width_1);  // Roll PWM
  //Serial.print(" Y: ");
  //Serial.print(ch_width_4);  // Yaw PWM
  //Serial.print(" Aux1: ");
  //Serial.print(ch_width_5);  // Aux1 PWM
  //Serial.print(" Aux2: ");
 // Serial.println(ch_width_6);  // Aux2 PWM

  delay(50);  // Delay before the next loop iteration
}
